const { promisify } = require('util');
const exec = promisify(require('child_process').exec)

const fs = require('fs');
var path = require('path');

// const core = require('@actions/core');

const segment = "parser";
const folderPath = path.join(__dirname, `../pt/parser`);

const startStringStart = "{ ===== Pasted contents of parser.def, generated by S/SL from parser.ssl";
const startStringEnd = "defines Parser Semantic Operations, Input/Output Tokens, Error Codes and Semantic Types }";
const endString = "{ ===== End of contents of parser.def }";

function readSslDefsFile() {
    try {
        const sslDefs = fs.readFileSync(`${folderPath}/parser.def`, 'utf-8');
        const parserPt = fs.readFileSync(`${folderPath}/parser.pt`, 'utf-8');

        const parserSegment = parserPt.indexOf(startStringEnd);

        const regex = new RegExp(`/${startStringEnd}*?${endString}/`);

        const res = parserPt.replace(regex, '\n' + sslDefs + '\n');
        
        writeOutput(res);
    } catch (e) {
        console.error("Bash command failed, aborting! ", e);
        // core.setFailed("Bash command failed, aborting" + e.message);
    }
}

function writeOutput(content) {
    console.log(`\n--------------------------------\nWriting output`);

    console.log(content)

    if (!content) {
        console.error("Error, something went wrong, file is empty! ");
        // core.setFailed("Error, something went wrong, file is empty! ");

        return;
    }

    fs.writeFileSync(`${folderPath}/parser.def.txt`, content);
}

readSslDefsFile();