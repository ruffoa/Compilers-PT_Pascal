 % .sNewLine
 .sProgram
 .sIdentifier
 .sParmEnd
 % .sNewLine
 % .sNewLine
  .sBegin   // begin main procedure
  .sConst   // nelements declaration
   .sIdentifier
    .sInteger 25
   % .sNewLine
  .sConst   // maxval declaration
   .sIdentifier
    .sInteger
   % .sNewLine
   % .sNewLine
  .sVar     // list declaration
   .sIdentifier
     .sArray
      .sIdentifier
     .sRange
      .sIdentifier
   .sMutable
   % .sNewLine
  .sVar     // current declaration
   .sIdentifier
      .sIdentifier
   .sMutable
   % .sNewLine
   % .sNewLine
  .sProcedure   // lessthan function
  .sIdentifier  // 'lessthan'
   .sIdentifier // i
   .sIdentifier // int
   .sIdentifier // j
   .sIdentifier // int
   .sIdentifier // b declaration
   .sVar        // mut
   .sIdentifier // bool
   .sParmEnd
  % .sNewLine
   .sBegin      // start lessthan function
    .sAssignmentStmt    // current = i
    .sIdentifier        'current'
        .sIdentifier    'i'
    .sExpnEnd           // end assignment 
    % .sNewLine
    .sAssignmentStmt    // b = (list.....)
    .sIdentifier        // b
            .sIdentifier    // list
             .sSubscript    // [i]
                 .sIdentifier   // i
             .sExpnEnd      // end list([i])
            .sIdentifier    // list
             .sSubscript    // [j]
                 .sIdentifier   // j
             .sExpnEnd      end list([j])
         .sLT               // <
    .sExpnEnd               // end b = (list....)
    % .sNewLine
   .sEnd        // end lessthan function
  % .sNewLine
  % .sNewLine
  .sProcedure   // swap function
  .sIdentifier  // 'swap'
   .sIdentifier // 'i'
   .sIdentifier // int
   .sIdentifier // 'j'
   .sIdentifier // int
   .sParmEnd    // end function parameters
  % .sNewLine
   .sBegin      // start swap function
   .sVar        // t declaration
    .sIdentifier    // 't'
       .sIdentifier // int
    .sMutable
    % .sNewLine
    .sAssignmentStmt    // current = j
    .sIdentifier        // current
        .sIdentifier    // j
    .sExpnEnd           // end assignment
    % .sNewLine
    .sAssignmentStmt    // t = list[i]
    .sIdentifier        // 't'
        .sIdentifier    // 'list'
         .sSubscript    // [i]
             .sIdentifier   // i
         .sExpnEnd      // list[i]
    .sExpnEnd           // end t = list[i]
    % .sNewLine
    .sAssignmentStmt    // list [i] = list[j]
    .sIdentifier        // list
    .sSubscript         // [i]
        .sIdentifier    // i
    .sExpnEnd           // end list[i]
        .sIdentifier    // list [j]
         .sSubscript    // [j]
             .sIdentifier   // j
         .sExpnEnd      // end list[j]
    .sExpnEnd           // end list [i] = list[j]
    % .sNewLine
    .sAssignmentStmt    // list[j] = t
    .sIdentifier        // list
    .sSubscript         // [j]
        .sIdentifier    // j
    .sExpnEnd           // end list[j]
        .sIdentifier    // t
    .sExpnEnd           // end list[j] = t
    % .sNewLine
   .sEnd                // end swap function
  % .sNewLine
  % .sNewLine
  .sProcedure           // show function
  .sIdentifier          // 'show'
   .sParmEnd            // end empty params section '()'
  % .sNewLine
   .sBegin              // begin show function
   .sVar                // let mut i = 1
    .sIdentifier        // i
     .sInitialValue
         .sInteger      // 1
     .sExpnEnd          // end initial val exprssion
    .sMutable
    % .sNewLine
    .sLoopStmt          // loop start
    % .sNewLine
     .sBegin            // begin loop
       .sCallStmt       // 'print' call
       .sIdentifier     // 'print'
           .sIdentifier // list
            .sSubscript // [i]
                .sIdentifier    // i
            .sExpnEnd   // end list[i]
       .sExpnEnd        // ??? (no idea what this is for...)
       .sFieldWidth     // : in list[i]:4
           .sInteger    // 4
       .sExpnEnd        // end mini-expression (:4)
       .sParmEnd        // end function call parameters (list[i]:4)
      % .sNewLine
      .sAssignmentStmt  // i += 1 -> i = i + 1
      .sIdentifier      // i
      .sIdentifier      // i 
          .sInteger     // 1
      .sAdd             // add the two together
      .sExpnEnd         // end the i += 1 statement
      % .sNewLine
     .sEnd              // end the loop
    .sLoopBreakIf       // end the loop if...
        .sIdentifier    // 'i'
        .sIdentifier    // 'nelements'
     .sGT               // >
    .sExpnEnd           // end i > nelements
     .sBegin            // absolutely no idea what this is :(
     % .sNewLine
     .sNullStmt         // empty braces....
     .sEnd              // end odd section?
    % .sNewLine
     .sCallStmt         // println call
     .sIdentifier       // 'println'
     .sParmEnd          // end function parameters section 
    % .sNewLine
   .sEnd                // end the 'show' function
  % .sNewLine
  % .sNewLine
  .sProcedure
  .sIdentifier
   .sParmEnd
  % .sNewLine
   .sBegin
   .sVar
    .sIdentifier
     .sInitialValue
         .sIdentifier
         .sInteger
       .sSubtract
     .sExpnEnd
    .sMutable
    % .sNewLine
    .sWhileStmt
        .sIdentifier
        .sInteger
     .sGT
    .sExpnEnd
    % .sNewLine
     .sBegin
     .sVar
      .sIdentifier
       .sInitialValue
           .sInteger
       .sExpnEnd
      .sMutable
      % .sNewLine
      .sWhileStmt
          .sIdentifier
          .sIdentifier
       .sLT
      .sExpnEnd
      % .sNewLine
       .sBegin
       .sVar
        .sIdentifier
           .sIdentifier
        .sMutable
        % .sNewLine
         .sCallStmt
         .sIdentifier
             .sIdentifier
         .sExpnEnd
             .sIdentifier
             .sInteger
           .sAdd
         .sExpnEnd
         .sMutable
             .sIdentifier
         .sExpnEnd
         .sParmEnd
        % .sNewLine
        .sIfStmt
             .sIdentifier
            .sNot
        .sExpnEnd
        .sThen
        % .sNewLine
         .sBegin
           .sCallStmt
           .sIdentifier
               .sIdentifier
           .sExpnEnd
               .sIdentifier
               .sInteger
             .sAdd
           .sExpnEnd
           .sParmEnd
          % .sNewLine
         .sEnd
        % .sNewLine
        .sAssignmentStmt
        .sIdentifier
        .sIdentifier
            .sInteger
        .sAdd
        .sExpnEnd
        % .sNewLine
       .sEnd
      % .sNewLine
      .sAssignmentStmt
      .sIdentifier
      .sIdentifier
          .sInteger
      .sSubtract
      .sExpnEnd
      % .sNewLine
     .sEnd
    % .sNewLine
   .sEnd
  % .sNewLine
  % .sNewLine
  % .sNewLine
   .sAssignmentStmt
   .sIdentifier
   .sSubscript
       .sInteger
   .sExpnEnd
       .sInteger
   .sExpnEnd
   % .sNewLine
   % .sNewLine
  .sVar
   .sIdentifier
    .sInitialValue
        .sInteger
    .sExpnEnd
   .sMutable
   % .sNewLine
   .sLoopStmt
   % .sNewLine
    .sBegin
     .sAssignmentStmt
     .sIdentifier
     .sIdentifier
         .sInteger
     .sAdd
     .sExpnEnd
     % .sNewLine
    .sVar
     .sIdentifier
      .sInitialValue
          .sIdentifier
           .sSubscript
               .sIdentifier
               .sInteger
             .sSubtract
           .sExpnEnd
          .sInteger
         .sMultiply
      .sExpnEnd
     % .sNewLine
     .sAssignmentStmt
     .sIdentifier
     .sSubscript
         .sIdentifier
     .sExpnEnd
         .sIdentifier
         .sIdentifier
        .sModulus
     .sExpnEnd
     % .sNewLine
    .sEnd
   .sLoopBreakIf
       .sIdentifier
       .sIdentifier
    .sEq
   .sExpnEnd
    .sBegin
    % .sNewLine
    .sNullStmt
    .sEnd
   % .sNewLine
   % .sNewLine
   .sAssignmentStmt
   .sIdentifier
       .sInteger
   .sExpnEnd
   % .sNewLine
   % .sNewLine
   % .sNewLine
    .sCallStmt
    .sIdentifier
    .sParmEnd
   % .sNewLine
    .sCallStmt
    .sIdentifier
    .sParmEnd
   % .sNewLine
    .sCallStmt
    .sIdentifier
    .sParmEnd
   % .sNewLine
  .sEnd
 % .sNewLine
