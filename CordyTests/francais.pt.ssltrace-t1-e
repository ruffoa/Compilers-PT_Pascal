  .pNewLine
  .pNewLine
  .pIdentifier (screened to pMod)
  .pIdentifier (screened to pMain)
 .pLeftParen
  .pIdentifier
  % Output token text 'input'
 .pComma
  .pIdentifier
  % Output token text 'output'
 .pRightParen
 .pLeftBrace
 .pNewLine
 .pNewLine
  .pIdentifier (screened to pLet)
  .pIdentifier (screened to pMut)
  .pIdentifier
  % Output token text 'infinitive'
 .pColon
  .pIdentifier
  % Output token text 'str'
 .pComma
 .pNewLine
  .pIdentifier (screened to pMut)
  .pIdentifier
  % Output token text 'root'
 .pColon
  .pIdentifier
  % Output token text 'str'
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier (screened to pLoop)
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Please give me a regular French 'er' verb (end with 'arreter')'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'read'
 .pLeftParen
  .pIdentifier
  % Output token text 'infinitive'
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Thanks, here is the present conjugation'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'root'
 .pEquals
  .pIdentifier
  % Output token text 'infinitive'
 .pSlash
  .pInteger
  % Output token text '1'
 .pColon
 .pLeftParen
 .pQuestionMark
  .pIdentifier
  % Output token text 'infinitive'
 .pMinus
  .pInteger
  % Output token text '2'
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'The root of this verb is ''
 .pComma
  .pIdentifier
  % Output token text 'root'
 .pComma
  .pStringLiteral
  % Output token text '''
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier (screened to pIf)
  .pIdentifier
  % Output token text 'infinitive'
 .pSlash
 .pLeftParen
 .pQuestionMark
  .pIdentifier
  % Output token text 'infinitive'
 .pMinus
  .pInteger
  % Output token text '1'
 .pRightParen
 .pColon
 .pQuestionMark
  .pIdentifier
  % Output token text 'infinitive'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'er'
 .pLeftBrace
 .pNewLine
 .pNewLine
  .pIdentifier (screened to pIf)
 .pLeftParen
  .pIdentifier
  % Output token text 'root'
 .pSlash
  .pInteger
  % Output token text '1'
 .pColon
  .pInteger
  % Output token text '1'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'a'
 .pRightParen
 .pDoubleOrBar
 .pLeftParen
  .pIdentifier
  % Output token text 'root'
 .pSlash
  .pInteger
  % Output token text '1'
 .pColon
  .pInteger
  % Output token text '1'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'e'
 .pRightParen
 .pNewLine
 .pDoubleOrBar
 .pLeftParen
  .pIdentifier
  % Output token text 'root'
 .pSlash
  .pInteger
  % Output token text '1'
 .pColon
  .pInteger
  % Output token text '1'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'i'
 .pRightParen
 .pDoubleOrBar
 .pLeftParen
  .pIdentifier
  % Output token text 'root'
 .pSlash
  .pInteger
  % Output token text '1'
 .pColon
  .pInteger
  % Output token text '1'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'o'
 .pRightParen
 .pNewLine
 .pDoubleOrBar
 .pLeftParen
  .pIdentifier
  % Output token text 'root'
 .pSlash
  .pInteger
  % Output token text '1'
 .pColon
  .pInteger
  % Output token text '1'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'u'
 .pRightParen
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'J''
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'e'
 .pRightParen
 .pSemicolon
 .pNewLine
 .pRightBrace
  .pIdentifier (screened to pElse)
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Je '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'e'
 .pRightParen
 .pSemicolon
 .pNewLine
 .pRightBrace
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Tu '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'es'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Il ou elle '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'e'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier (screened to pIf)
  .pIdentifier
  % Output token text 'root'
 .pSlash
 .pQuestionMark
  .pIdentifier
  % Output token text 'root'
 .pColon
 .pQuestionMark
  .pIdentifier
  % Output token text 'root'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'g'
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Nous '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'eons'
 .pRightParen
 .pSemicolon
 .pNewLine
 .pRightBrace
  .pIdentifier (screened to pElse)
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Nous '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'ons'
 .pRightParen
 .pSemicolon
 .pNewLine
 .pRightBrace
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Vous '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'ez'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'Ils ou elles '
 .pPlus
  .pIdentifier
  % Output token text 'root'
 .pPlus
  .pStringLiteral
  % Output token text 'ent'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
 .pRightBrace
  .pIdentifier (screened to pElse)
  .pIdentifier (screened to pIf)
  .pIdentifier
  % Output token text 'infinitive'
 .pSlash
 .pLeftParen
 .pQuestionMark
  .pIdentifier
  % Output token text 'infinitive'
 .pMinus
  .pInteger
  % Output token text '1'
 .pRightParen
 .pColon
 .pQuestionMark
  .pIdentifier
  % Output token text 'infinitive'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'ir'
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'I'm too tired to do an 'ir' verb'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pNewLine
 .pRightBrace
  .pIdentifier (screened to pElse)
 .pLeftBrace
 .pNewLine
  .pIdentifier
  % Output token text 'print'
 .pLeftParen
  .pStringLiteral
  % Output token text 'I don't like the looks of this verb'
 .pRightParen
 .pSemicolon
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
  .pIdentifier
  % Output token text 'println'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pRightBrace
 .pNewLine
 .pNewLine
  .pIdentifier (screened to pBreak)
  .pIdentifier (screened to pIf)
  .pIdentifier
  % Output token text 'infinitive'
 .pDoubleEquals
  .pStringLiteral
  % Output token text 'arreter'
 .pSemicolon
 .pNewLine
 .pNewLine
  .pIdentifier
  % Output token text 'readln'
 .pLeftParen
 .pRightParen
 .pSemicolon
 .pNewLine
 .pRightBrace
 .pNewLine
 .pRightBrace
 .pNewLine
 .pEndFile
