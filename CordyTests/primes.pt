// Qust example program 
// Primes: determine the primes up to maxprimes using the sieve method 
mod main (output) {

    // Limits
    const maxprimes = 100;
    let maxfactor = 50 / 2;

    const prime = true;
    const notprime = false;

   let mut flagvector: [bool:maxprimes];

    // Everything begins as prime 
    let mut i = 1;
    while i <= maxprimes {
	flagvector [i] = prime;
	i += 1;
    }

    // Main program

    // Pick out multiples of each prime factor and set these to notprime 
    let mut multiple = 2;
    let mut factor = 2;

    loop {
	break if factor > maxfactor ;

	// Set multiples of factor to notprime  
	multiple = factor + factor;
	loop {
	    break if multiple > maxprimes ;
	    flagvector [multiple] = notprime;
	    multiple += factor;
	}

	// Set factor = next prime 
	let mut nextfactor = factor + 1;
        let mut isprime: bool = flagvector[nextfactor];
	loop {
	    break if (nextfactor > maxprimes) || isprime ;
	    nextfactor += 1;
            isprime = flagvector[nextfactor];
	}
	factor = nextfactor;
    }

    // Now report the results 
    print ("The primes up to ", maxprimes:1, " are:"); println();
    let mut nextfactor = 2;
    loop {
	break if nextfactor > maxprimes ;
        let isprime: bool = flagvector[nextfactor];
	if isprime {
	    print (nextfactor:4);
	}
	nextfactor += 1;
    }
    println();
}
