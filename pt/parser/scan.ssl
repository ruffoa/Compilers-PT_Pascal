% PT Scanner.ssl   Ver. 4.2
%
% Date:  30 Jun 1980
%       (Revised v4.2 - 18 Dec 2019)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input : 
        lLetter 
        firstCharClass = lLetter 
        lDigit
        lPlus           '+'
        lMinus          '-'
        lStar           '*'
        lColon          ':'
        lEquals         '='
        lDot            '.'
        lComma          ','
        lSemicolon      ';'
        lQuote          '"'
        lBackslash
        lForwardSlash   '/'
        lLeftAngle      '<'
        lRightAngle     '>'
        lLeftParen      '('
        lRightParen     ')'
        lLeftBracket    '['
        lRightBracket   ']'
        lLeftBrace      '{'
        lRightBrace     '}'
        lPercent        '%'
        lAmpersand      '&'
        lExclamation	'!'
        lQuestionMark	'?'
        lBar            '|'
        lUnderscore     '_'
        lBlank
        lIllegal
        lNewLine
        lCarriageReturn
        lTab
        lNewPage 
        lEndFile
        lastCharClass = lEndFile;

Output :
        % Keyword tokens -
        %   Tokens pDiv through pRepeat are keywords which will be separated
        %   from user defined identifiers by the Screener.  This Scanner
        %   treats them all as identifiers.
        pElse 
        firstKeywordToken = pElse
        pOf
        pFile
        pConst
        pType
        pIf
        pWhile
        pPub
        pMod
        pMain
        pLet
        pMut
        pFn
        pLoop
        pBreak
        pMatch
        lastKeywordToken = pMatch

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus
        pMinus
        pStar
        pDot
        pComma
        pSemicolon
        pColon
        pEquals
        pPlusEquals
        pMinusEquals
        pEqualsEquals
        pForwardSlash
        pExclamation
        pQuestionMark
        pPercent
        pAmpersand
        pDoubleAmpersand
        pBar
        pDoubleBar
        pUnderscore
        pNotEqual
        pLess
        pLessEqual
        pEqualGreater
        pGreater
        pLeftParen
        pRightParen
        pLeftBracket
        pRightBracket
        pLeftBrace 
        pRightBrace
        pDotDot
        lastSyntaxToken = pDotDot;

Error :
        eIllegalChar = 5
        firstScanError = eIllegalChar
        eStringLiteralLine
        eStringLiteralEOF
        eCommentEOF
        eNoSeparator
        lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
        % Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
        {[
            | lBlank :
            | lLetter:
                oBufferSave
                @Identifier
            | lNewLine:
                .pNewLine
            | lCarriageReturn:
                % from Windows files, ignore
            | lTab:
            | ';':
                .pSemicolon
            | '(':
                [
                    | '*':
                        @AlternateComment
                    | *:
                        .pLeftParen
                ]
            | ')':
                .pRightParen
            | '[':
                .pLeftBracket
            | ']':
                .pRightBracket
            | '{':
                .pLeftBrace
            | '}':
                .pRightBrace
            | ',':
                .pComma
            | ':':
                .pColon
            | lDigit:
                oBufferSave
                @Integer
                [
                    | lLetter:
                        #eNoSeparator
                        oBufferSave
                        @Identifier
                    | *:
                ]
            | '=': 
                [
                    | '>':
                        .pEqualGreater
                    | '=':
                        .pEqualsEquals
                    | *: 
                        .pEquals
                ]
            | '+':
                [
                    | '=':
                        .pPlusEquals
                    | *:
                        .pPlus
                ]
            | lQuote:
                @StringLiteral
            | '-':
                [
                    | '=':
                        .pMinusEquals
                    | *:
                        .pMinus
                ]
            | '.':
                [
                    | '.':
                        .pDotDot
                    | *:
                        .pDot
                ]
            | '<':
                [
                    | '=':
                        .pLessEqual
                    | *:
                        .pLess
                ]
            | '>':
                .pGreater
            | '!': 
                [
                    | '=':
                        .pNotEqual
                    | *:
                        .pExclamation
                ]
            | '*':
                .pStar
            | '?':
                .pQuestionMark
            | '%': 
                .pPercent
            | '&':
                [
                    | '&':
                        .pDoubleAmpersand
                    | *:
                        .pAmpersand
                ]
            | '|': 
                [
                    | '|':
                        .pDoubleBar
                    | *:
                        .pBar
                ]
            | '_':
                .pUnderscore
            | '/':
                .pForwardSlash
            | lNewPage:
            | lEndFile:
                .pEndFile
                >
            | *:
                ?
                #eIllegalChar
        ]};

Identifier :
        % Assemble an identifier token

        {[
            | lLetter, lDigit:
                oBufferSave
            | *:
                .pIdentifier
                >
        ]};

Integer :
        % Assemble an integer token

        {[
            | lDigit:
                oBufferSave
            | *:
                .pInteger
                >
        ]};

StringLiteral :
        % Assemble a literal string token

        {[
            | lQuote:
                [
                    | lQuote:
                        oBufferSave
                    | *:
                        .pStringLiteral
                        >
                ]
            | lNewLine:         % literal must not cross a line boundary
                #eStringLiteralLine
                .pNewLine
                >
            | lEndFile:         % literal must be closed before EOF
                #eStringLiteralEOF
                .pEndFile
                >
            | *:        % literal may contain any other character
                [
                    | lBackslash:
                        oBufferSave
                    | *:
                ]
                ?
                oBufferSave
        ]};

Comment :
        % Discard the contents of a comment

        {[
            | '}':
                >
            | lNewLine:
                .pNewLine
            | lEndFile:         % comment must be closed before EOF
                #eCommentEOF
                .pEndFile
                >
            | *:        % comment may contain any other character
                ?
        ]};

AlternateComment :
        {[
            | '*':
                [
                    | ')':
                        >
                    | *:
                ]
            | lNewLine:
                .pNewLine
            | lEndFile:
                #eCommentEOF
                .pEndFile
                >
            | *:
                ?
        ]};

end
