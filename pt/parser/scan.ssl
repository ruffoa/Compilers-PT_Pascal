% PT Scanner.ssl   Ver. 4.2
%
% Date:  30 Jun 1980
%       (Revised v4.2 - 18 Dec 2019)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input : 
        lLetter 
        firstCharClass = lLetter 
        lDigit
        lPlus           '+'
        lMinus          '-'
        lStar           '*'
        lColon          ':'
        lEquals         '='
        lComma          ','
        lSemicolon      ';'
        lQuote
        lBackslash
        lLeftAngle      '<'
        lRightAngle     '>'
        lLeftParen      '('
        lRightParen     ')'
        lLeftBracket    '['
        lRightBracket   ']'
        lLeftBrace      '{'
        lRightBrace     '}'     % adding new character classes below here
        lQuestionMark   '?'
        lForwardSlash   '/'
        lPercent        '%'
        lAmpersand      '&'
        lBar            '|'
        lExclamation    '!'
        lUnderscore     '_'
        lBlank
        lIllegal
        lNewLine
        lCarriageReturn
        lTab
        lNewPage 
        lEndFile
        lastCharClass = lEndFile;

Output :
        % Keyword tokens -
        %   Tokens pDiv through pRepeat are keywords which will be separated
        %   from user defined identifiers by the Screener.  This Scanner
        %   treats them all as identifiers.
        pElse 
        firstKeywordToken = pElse
        pOf
        pFile
        pConst
        pType
        pIf
        pWhile
        pPub
        pMod
        pMain
        pLet
        pMut
        pFn
        pLoop
        pBreak
        pMatch
        lastKeywordToken = pMatch

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus
        pMinus
        pStar
        pComma
        pSemicolon
        pColon
        pEquals
        pNotEqual
        pLess
        pLessEqual
        pGreater
        pLeftParen
        pRightParen
        pLeftBracket
        pRightBracket           % adding new syntax tokens below here
        pLeftBrace
        pRightBrace
        pPlusEquals
        pMinusEquals
        pForwardSlash
        pPercent
        pDoubleEquals
        pDoubleAmpersand
        pDoubleBar
        pBar
        pNot
        pUnderscore
        pQuestionMark
        pEqualGreater
        lastSyntaxToken = pEqualGreater;

Error :
        eIllegalChar = 5
        firstScanError = eIllegalChar
        eStringLiteralLine
        eStringLiteralEOF
        eCommentEOF
        eNoSeparator
        lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
        % Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
        {[
            | lBlank :
            | lLetter:
                oBufferSave
                @Identifier
            | lNewLine:
                .pNewLine
            | lCarriageReturn:
                % from Windows files, ignore
            | lTab:
            | ';':
                .pSemicolon
            | '(':
                .pLeftParen
            | ')':
                .pRightParen
            | '[':
                .pLeftBracket
            | ']':
                .pRightBracket
            | '/':
                [
                    | '/':
                        @Comment
                    | '*':
                        @AlternateComment
                    | *:
                        .pForwardSlash
                ]
            | ',':
                .pComma
            | ':':
                .pColon
            | lDigit:
                oBufferSave
                @Integer
                [
                    | lLetter:
                        #eNoSeparator
                        oBufferSave
                        @Identifier
                    | *:
                ]
            | '=':
                [
                    | '=':
                        .pDoubleEquals
                    | '>':
                        .pEqualGreater
                    | *:
                        .pEquals
                ]
            | '+':
                [
                    | '=':
                        .pPlusEquals
                    | *:
                        .pPlus
                ]
            | lQuote:
                @StringLiteral
            | '-':
                [
                    | '=':
                        .pMinusEquals
                    | *:
                        .pMinus
                ]
            | '<':
                [
                    | '=':
                        .pLessEqual
                    | *:
                        .pLess
                ]
            | '>':
                .pGreater
            | '{':
                .pLeftBrace
            | '}':
                .pRightBrace
            | '?':
                .pQuestionMark
            | '!':
                [
                    | '=':
                        .pNotEqual
                    | *:
                        .pNot
                ]
            | '_':
                .pUnderscore
            | '|':
                [
                    | '|':
                        .pDoubleBar
                    | *:
                        .pBar
                ]
            | '%':
                .pPercent
            | '&':
                [
                    | '&':
                        .pDoubleAmpersand
                    | *:                    % if not a double ampersand than it's an illegal syntax token
                        ?
                        #eIllegalChar
                ]
            | '*':
                .pStar
            | lNewPage:
            | lEndFile:
                .pEndFile
                >
            | *:
                ?
                #eIllegalChar
        ]};

Identifier :
        % Assemble an identifier token

        {[
            | lLetter, lDigit:
                oBufferSave
            | *:
                .pIdentifier
                >
        ]};

Integer :
        % Assemble an integer token

        {[
            | lDigit:
                oBufferSave
            | *:
                .pInteger
                >
        ]};

StringLiteral :
        % Assemble a literal string token

        {[
            | lQuote:
                | lQuote:
                    oBufferSave
                | *:
                    .pStringLiteral
                    >
            | lBackslash:       % this is the escape character in qust
                oBufferSave
                ?
                oBufferSave
            | lNewLine:         % literal must not cross a line boundary
                #eStringLiteralLine
                .pNewLine
                >
            | lEndFile:         % literal must be closed before EOF
                #eStringLiteralEOF
                .pEndFile
                >
            | *:        % literal may contain any other character
                ?
                oBufferSave
        ]};

Comment :
        % Discard the contents of a comment

        {[
            | lNewLine:
                .pNewLine
                >
            | lEndFile:         % comment must be closed before EOF
                #eCommentEOF
                .pEndFile
                >
            | *:        % comment may contain any other character
                ?
        ]};

AlternateComment :
        {[
            | '*':
                [
                    | '/':
                        >
                    | *:    % not the end of the comment so consume character
                        ?
                ]
            | lNewLine:
                .pNewLine
            | lEndFile:
                #eCommentEOF
                .pEndFile
                >
            | *:
                ?
        ]};

end
