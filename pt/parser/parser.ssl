%  PT Parser.ssl        Ver. 4.2
%
% Date:  30 Jun 1980
%        (Revised v4.2 - 18 Dec 2019)
%
% Author:  Alan Rosselet
%
% Abstract
%
%     This module parses the syntax token stream emitted by the scanner
%   and emits a postfix stream of tokens to the semantic analyzer
%   module.  The parser detects and repairs syntax errors so that the
%   token stream emitted to the semantic analyzer is syntactically
%   legal (except for the special case of declaration phase errors - see
%   comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        pElse                       'else'
        firstKeywordToken = pElse
        pOf                         'of'
        pFile                       'file'
        pConst                      'const'
        pType                       'type'
        pIf                         'if'
        pWhile                      'while'
        pPub                        'pub'
        pMod                        'mod'
        pMain                       'main'
        pLet                        'let'
        pMut                        'mut'
        pFn                         'fn'
        pLoop                       'loop'
        pBreak                      'break'
        pMatch                      'match'
        lastKeywordToken = pMatch

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pEquals                 '='
        pNotEqual               '!='
        pLess                   '<'
        pLessEqual              '<='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        pLeftBrace              '{'
        pRightBrace             '}'
        pPlusEquals             '+='
        pMinusEquals            '-='
        pForwardSlash           '/'
        pPercent                '%'
        pDoubleEquals           '=='
        pDoubleAmpersand        '&&'
        pDoubleBar              '||'
        pBar                    '|'
        pNot                    '!'
        pUnderscore             '_'
        pQuestionMark           '?'
        pEqualGreater           '=>'
        lastSyntaxToken = pEqualGreater;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sModule
        sPublic
        sParmBegin
        sParmEnd
        sConst
        sType
        sVar
        sMutable
        sInitialValue
        sProcedure
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseOtherwise
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sSubstring
        sLength
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
        sLoopStmt
        sLoopBreak
        sLoopEnd
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sNewLine
        sEndOfFile
        lastSemanticToken = sEndOfFile;


rules

Program :
        'mod' 'main' .sProgram
        % program name
        % pIdentifier
        % program parameters
        '('
        {
            pIdentifier  .sIdentifier
            [
                | ',':
                | *:
                    >
            ]
        }
        ')'
        .sParmEnd
        %';'  
        @Block;

Block :
        % Strictly speaking, standard Pascal requires that declarations
        % appear only in the order consts, types, vars, procedures.
        % We allow arbitrary intermixing of these instead to preserve
        % programmer sanity.

        '{'
        .sBegin % output a begin at the beginning of a block
        {[
            | 'const':
                .sConst
                @ConstantDefinitions
            | 'type':
                .sType
                @TypeDefinitions
            | 'let':
                .sVar
                @VariableDeclarations
            | 'fn':
                .sProcedure
                pIdentifier  .sIdentifier   % procedure name
                @ProcedureHeading
            | 'pub':
                .sProcedure
                pIdentifier  .sIdentifier   % procedure name
                .sPublic
                @ProcedureHeading
            | pIdentifier:
                @AssignmentOrCallStmt
            | '{':
                @BeginStmt
            | 'if':
                @IfStmt
            | 'while':
                @WhileStmt
            | 'match':
                @CaseStmt
            | 'loop':
                @RepeatStmt
            | *:
                >
        ]}
        %  'begin'
        % '{'
        % @BeginStmt;
        '}'
        .sEnd;  % end the block choice rule with an .sEnd token
        % ;

ConstantDefinitions :
        % Accept one or more named constant definitions
        pIdentifier  .sIdentifier
        '=' @ConstantValue ';'
        {[
            | pIdentifier:
                .sIdentifier
                '=' @ConstantValue ';'
            | *:
                >
        ]};

ConstantValue :
        [
            | pInteger:
                .sInteger
            | pIdentifier:
                .sIdentifier
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | pStringLiteral:
                .sStringLiteral
        ];

UnsignedIntegerConstant :
        [
            | pIdentifier:
                .sIdentifier
            | pInteger:
                .sInteger
        ];

TypeDefinitions :
        % Accept one or more named type definitions.
        pIdentifier  .sIdentifier
        '='  @TypeBody  ';'
        {[
            | pIdentifier:
                .sIdentifier
                '='  @TypeBody  ';'
            | *:
                >
        ]};

TypeBody :
        [
            %| 'array':
            %    .sArray
            %    '['  @SimpleType  ']'
            %    'of'  @SimpleType
            | 'file':
                .sFile
                'of'  @SimpleType
            | *:
                @SimpleType
        ];

SimpleType :
        % A simple type is a named type (possibly predefined)
        % or a subrange type specification
        [
            | pIdentifier:
                .sIdentifier
                %[
                    %| '..':
                    %    .sRange         %% this may be unnecessary
                    %    @OptionallySignedIntegerConstant
                %    | *:
                %]
            | *:
                @OptionallySignedIntegerConstant
                % '..'  .sRange
                @OptionallySignedIntegerConstant
        ];

OptionallySignedIntegerConstant :
        [
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | *:
                @UnsignedIntegerConstant
        ];

VariableDeclarations :
        % Accept one or more variable declarations.
        pIdentifier  .sIdentifier
        ':'  @TypeBody  ';'
        {[
            | pIdentifier:
                .sIdentifier
                ':'  @TypeBody  ';'
            | *:
                >
        ]};

ProcedureHeading :
        % Accept zero or more procedure formal parameter declarations, but require the brackets
        '('
        {[
            % formal parameter identifier
            | 'mut':
                pIdentifier  .sIdentifier
                .sVar
                @VariableDeclarations
            | pIdentifier:
                .sIdentifier
                @VariableDeclarations
            | *:
                >
        ]}
        ')'
        .sParmEnd;

Statement :
        [
            | pIdentifier:
                @AssignmentOrCallStmt
            | '{':
                @BeginStmt
            | 'if':
                @IfStmt
            | 'while':
                @WhileStmt
            | 'match':
                @CaseStmt
            | 'loop':
                @RepeatStmt
            | ';':
                .sNullStmt
            | *:
                .sNullStmt
        ];

AssignmentOrCallStmt :
        [
            | '=':
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                ']'  '='
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];

CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            | *:        % no actual parameters
        ]
        .sParmEnd;

BeginStmt :
        .sBegin
        {
            @Statement
            [
                | ';':
                | '}':
                    .sEnd
                    >
            ]
        };

IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        .sThen
        @Statement
        [
            | 'else':
                .sElse
                @Statement
            | *:
        ];

CaseStmt :
        .sCaseStmt
        @Expression
        .sExpnEnd
        'of'
        @CaseAlternative
        {[
            | ';':
                % since case alternatives cannot be null, allow
                % for the common situation of an extra semicolon
                % at the end of the list of case alternatives.
                [
                    | '}':
                        >
                    | *:
                        @CaseAlternative
                ]
            | '}':
                >
        ]}
        .sCaseEnd;

CaseAlternative :
        % A case alternative is a statement labelled by
        % one or more optionally signed integer constants

        {
            @OptionallySignedIntegerConstant
            [
                | ',':
                | *:
                    >
            ]
        }
        .sLabelEnd
        ':'  @Statement;

WhileStmt :
        .sWhileStmt
        @Expression
        .sExpnEnd
        % 'do' ToDo: FIX ME!
        @Statement;

RepeatStmt :
        .sLoopStmt
        {
            @Statement
            [
                | ';':
                %| 'until':  ToDo: Fix me!
                %    .sRepeatEnd
                    >
            ]
        }
        @Expression
        .sExpnEnd;

Expression :
        @SimpleExpression
        [
            | '==':
                @SimpleExpression  .sEq
            | '!=':
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | pEqualGreater:
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | '||':
                .sInfixOr  @Term  .sOr
            | *:
                >
        ]};

Term :
        @Factor
        {[
            | '*':
                @Factor  .sMultiply
            | '/':
                @Factor  .sDivide
            | '%':
                @Factor  .sModulus
            | '&&':
                .sInfixAnd  @Factor  .sAnd
            | *:
                >
        ]};

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | '!':
                @Factor
                .sNot
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];

IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end
