        { Semantic Operations }
        oTempAllocate = 14;
        oTempFree = 15;
        oOperandPushMode = 16; { (16) }
        oOperandChooseMode = 17; { >>16 }
        oOperandPushVariable = 18;
        oOperandPushInteger = 19;
        oOperandPushChar = 20;
        oOperandPushBoolean = 21;
        oOperandPushJumpCondition = 22; { (15) }
        oOperandChooseJumpCondition = 23; { >>15 }
        oOperandPushStringDescriptor = 24;
        oOperandPushProcedure = 25;
        oOperandPushTrap = 26;
        oOperandPushCaseLow = 27;
        oOperandPushCaseHigh = 28;
        oOperandPushArrayLowerBound = 29;
        oOperandPushArrayUpperBound = 30;
        oOperandPushCopy = 31;
        oOperandPushTemp = 32;
        oOperandSetMode = 33; { (16) }
        oOperandSetLength = 34; { (13) }
        oOperandSetRegnum = 35; { (13) }
        oOperandChooseLength = 36; { >>13 }
        oOperandSetValue = 37; { (13) }
        oOperandChooseValue = 38; { >>13 }
        oOperandChooseManifestValue = 39; { >>13 }
        oOperandIsValueNegative = 40; { >>14 }
        oOperandEnterValueFromCaseTableAddress = 41;
        oOperandEnterValueFromCodeAddress = 42;
        oOperandEnterValueFromStringLength = 43;
        oOperandEnterValueFromDataAreaSize = 44;
        oOperandCompareLeftAndRight = 45; { >>14 }
        oOperandCompareRightAndDest = 46; { >>14 }
        oOperandIsJumpCondition = 47; { >>14 }
        oOperandComplementJumpCondition = 48;
        oOperandAddManifestValues = 49;
        oOperandSubtractManifestValues = 50;
        oOperandMultiplyManifestValues = 51;
        oOperandNegateManifestValue = 52;
        oOperandCompareManifestValues = 53; { >>14 }
        oOperandMergeShuntsWithAddress = 54;
        oOperandMergeShunts = 55;
        oOperandFoldManifestSubscript = 56;
        oOperandSwap = 57;
        oOperandSwapRightAndDest = 58;
        oOperandSwapLeftAndDest = 59;
        oOperandPop = 60;
        oFixPushAddress = 61;
        oFixPushLastAddress = 62;
        oFixSwapAddresses = 63;
        oFixAndFreeShuntList = 64;
        oFixAndFreeFalseBranches = 65;
        oFixForwardBranch = 66;
        oFixPopAddress = 67;
        oEmitProcLabel = 68; { (16) }
        oEmitNone = 69; { (17) }
        oEmitSingle = 70; { (17) }
        oEmitDouble = 71; { (17) }
        oEmitString = 72;
        oEmitStringLength = 73;
        oEmitConditionalForwardBranch = 74;
        oEmitUnconditionalForwardBranch = 75;
        oEmitConditionalBackwardBranch = 76;
        oEmitUnconditionalBackwardBranch = 77;
        oEmitSourceCoordinate = 78;
        oEmitMergeSourceCoordinate = 79;
        oEmitCaseMergeBranch = 80;
        oEmitCaseBranchTable = 81;
        oCasePush = 82;
        oCasePop = 83;
        oCaseEnterTCodeAddress = 84;
        oCaseEnterVariantAddress = 85;
        oCaseEnterMergeAddress = 86;
        oCaseEnterAbortAddress = 87;
        oArrayEnterLowerBound = 88;
        oArrayEnterUpperBound = 89;
        oOptionTestChecking = 90; { >>14 }

        { Input Tokens }
        tMultiply = 0;
        firstTcode = 0;
        tDivide = 1;
        tModulus = 2;
        tAdd = 3;
        tSubtract = 4;
        tEQ = 5;
        tNE = 6;
        tGT = 7;
        tGE = 8;
        tLT = 9;
        tLE = 10;
        tAnd = 11;
        tInfixAnd = 12;
        tOr = 13;
        tInfixOr = 14;
        tNegate = 15;
        tNot = 16;
        tChr = 17;
        tOrd = 18;
        tEoln = 19;
        tEOF = 20;
        tVarParm = 21;
        tFetchAddress = 22;
        tFetchInteger = 23;
        tFetchChar = 24;
        tFetchBoolean = 25;
        tAssignBegin = 26;
        tAssignAddress = 27;
        tAssignInteger = 28;
        tAssignChar = 29;
        tAssignBoolean = 30;
        tStoreParmAddress = 31;
        tStoreParmInteger = 32;
        tStoreParmChar = 33;
        tStoreParmBoolean = 34;
        tSubscriptBegin = 35;
        tSubscriptAddress = 36;
        tSubscriptInteger = 37;
        tSubscriptChar = 38;
        tSubscriptBoolean = 39;
        tArrayDescriptor = 40;
        tFileDescriptor = 41;
        tIfBegin = 42;
        tIfEnd = 43;
        tCaseBegin = 44;
        tWhileBegin = 45;
        tRepeatBegin = 46;
        tRepeatControl = 47;
        tCallBegin = 48;
        tParmEnd = 49;
        tProcedureEnd = 50;
        tWriteBegin = 51;
        tReadBegin = 52;
        tTrapBegin = 53;
        tWriteEnd = 54;
        tReadEnd = 55;
        tLiteralAddress = 56;
        firstCompoundTcode = 56;
        tLiteralInteger = 57;
        tLiteralChar = 58;
        tLiteralBoolean = 59;
        tLiteralString = 60;
        tStringDescriptor = 61;
        tSkipString = 62;
        tIfThen = 63;
        tIfMerge = 64;
        tCaseSelect = 65;
        tCaseMerge = 66;
        tCaseEnd = 67;
        tWhileTest = 68;
        tWhileEnd = 69;
        tRepeatTest = 70;
        tSkipProc = 71;
        tCallEnd = 72;
        tLineNumber = 73;
        tTrap = 74;
        lastCompoundTcode = 74;
        tEndOfFile = 75;
        lastTcode = 75;

        { Output Tokens }

        { Input/Output Tokens }

        { Error Codes }
        eDivisionByZero = 10;
        firstErrorCode = 10;
        lastSslErrorCode = 10;

        { Type Values }
        { Type 13 }
        minusOne = -1;
        zero = 0;
        null = 0;
        one = 1;
        two = 2;
        four = 4;
        eight = 8;
        twelve = 12;
        regAX = 1;
        regBX = 2;
        regCX = 3;
        regDX = 4;
        trHalt = 0;
        trReset = 1;
        trRewrite = 2;
        trRead = 3;
        trReadln = 4;
        trWrite = 5;
        trWriteln = 6;
        trWriteString = 7;
        trWriteInteger = 8;
        trWriteChar = 9;
        trReadInteger = 10;
        trReadChar = 11;
        trAssign = 12;
        trSubscriptAbort = 13;
        trCaseAbort = 14;
        trEoln = 15;
        trEof = 16;
        byte = 1;
        word = 2;
        { Type 14 }
        no = 0;
        yes = 1;
        { Type 15 }
        iJalways = -9;
        iJhi = -8;
        iJlos = -7;
        iJge = -6;
        iJlt = -5;
        iJle = -4;
        iJgt = -3;
        iJne = -2;
        iJeq = -1;
        iJnever = 0;
        { Type 16 }
        mStatic = 1;
        mStaticManifest = 2;
        mTemp = 3;
        mTempIndirect = 4;
        mTempIndirectCaseOffset = 5;
        mStackReg = 6;
        mStack = 7;
        mBaseReg = 8;
        mArgument = 9;
        mManifest = 10;
        mResultReg = 11;
        mRemainderReg = 12;
        mScratchReg1 = 13;
        mScratchReg2 = 14;
        mGlobalBase = 15;
        mLineNum = 16;
        mMainProc = 17;
        mProc = 18;
        mTrap = 19;
        mString = 20;
        mWord = 21;
        { Type 17 }
        iAdd = 1;
        iCmp = 2;
        iDec = 3;
        iDiv = 4;
        iInc = 5;
        iMul = 6;
        iShl = 7;
        iNeg = 8;
        iSub = 9;
        iMov = 10;
        iPush = 11;
        iPop = 12;
        iLoada = 13;
        iExtend = 14;
        iJmp = 15;
        iCall = 16;
        iReturn = 17;
        iEnter = 18;
        iLeave = 19;
        iGlobl = 20;
        iText = 21;
        iData = 22;
        iWord = 23;
        iSpace = 24;

        { S/SL Rule Table Addresses } {
        Program = 0;
        EmitProgramPrologue = 7;
        Block = 65;
        EmitProgramEpilogue = 58;
        OperandPopAndFreeTemp = 3230;
        Routine = 144;
        Statements = 248;
        OperandNextParameter = 233;
        EmitMove = 3932;
        AssignStmt = 310;
        CallStmt = 318;
        IfStmt = 393;
        WhileStmt = 557;
        RepeatStmt = 615;
        CaseStmt = 647;
        WriteProc = 779;
        ReadProc = 863;
        TrapStmt = 954;
        OperandPushVariable = 1267;
        OperandPushExpressionAssignPopPop = 1800;
        OperandPushExpression = 1072;
        OperandConvertJumpConditionToData = 3255;
        OperandForceAddressIntoTemp = 3605;
        OperandForceToStack = 3761;
        OperandPushBooleanControlExpression = 447;
        FoldIfStmt = 488;
        OperandComplementJumpCondition = 3128;
        OperandInfixOr = 3154;
        OperandForceToJumpCondition = 452;
        EmitTst = 3966;
        SkipToEndIf = 538;
        SkipToEndWhile = 596;
        OperandFreeTemp = 3243;
        CaseSelect = 675;
        CaseVariant = 678;
        CaseEnd = 686;
        EmitDefaultCaseAbort = 696;
        EmitCaseSubscriptJump = 720;
        OperandForceIntoTemp = 3543;
        OperandSubtractRightFromLeftPop = 2259;
        WriteParameter = 794;
        ReadParameter = 878;
        OperandAssignIntegerPopPop = 3192;
        EmitStringDescriptor = 1264;
        OperandNegate = 2084;
        OperandAddPop = 2162;
        OperandSubtractPop = 2281;
        OperandMultiplyPop = 2432;
        OperandDividePop = 2578;
        OperandModPop = 2704;
        OperandNot = 3123;
        OperandOrPop = 3176;
        OperandEqualPop = 3352;
        OperandGreaterPop = 3427;
        OperandLessPop = 3515;
        OperandChr = 2814;
        OperandOrd = 2820;
        OperandEolnFunction = 2844;
        OperandEofFunction = 2970;
        OperandSubscriptIntegerPop = 1334;
        OperandSubscriptCharPop = 1363;
        OperandSubscriptBooleanPop = 1395;
        OperandSubscriptNonManifestIntegerPop = 1398;
        OperandSubscriptNonManifestCharPop = 1662;
        OperandCheckedSubscriptNonManifestIntegerPop = 1411;
        OperandUncheckedSubscriptNonManifestIntegerPop = 1584;
        EmitSubscriptRangeCheck = 1529;
        OperandPushArrayLowerBound = 1496;
        OperandPushArrayUpperBound = 1510;
        EmitCmp = 3876;
        EmitSubscriptAbort = 1563;
        OperandCheckedSubscriptNonManifestCharPop = 1675;
        OperandUncheckedSubscriptNonManifestCharPop = 1747;
        OperandAssignCharPopPop = 3215;
        OperandAssignBooleanPopPop = 3225;
        OperandNegateAssignPopPop = 2059;
        OperandAddAssignPopPopPop = 2099;
        OperandSubtractAssignPopPopPop = 2239;
        OperandMultiplyAssignPopPopPop = 2324;
        OperandDivideAssignPopPopPop = 2531;
        OperandNotAssignPopPop = 3032;
        OperandAddRightToLeftPop = 2132;
        EmitAdd = 3846;
        OperandForceLeftIntoTemp = 3591;
        EmitSub = 3861;
        OperandMultiplyLeftByRightPop = 2357;
        OperandDivideLeftByRightPop = 2551;
        SaveTempRegsToStack = 2906;
        RestoreTempRegsFromStack = 2938;
        OperandPushTrueTemp = 3320;
        OperandPushFalseTemp = 3336;
        OperandPushTempByte = 3752;
        OperandFoldComparisonPopPop = 3519;
        OperandPushTempWord = 3743;
        OperandForceAddressIntoNewTemp = 3669;
        OperandAreLeftAndRightManifest = 3788; >>14
        OperandLeftOrRightIsTemp = 3817; >>14
        }

        { S/SL Table Parameters }
        sslTblSize = 4001;
        minSslTableValue = -32767;
        maxSslTableValue = 32767;
